local MinDistance = 4
local MaxForce = Vector3.new(math.huge, math.huge, math.huge)
local NormalForce = Vector3.new(30000, 30000, 30000)
local SelectionColor = Color3.fromRGB(0, 170, 255)

local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Camera = workspace.CurrentCamera

local LocalPlayer = Players.LocalPlayer

local Tool = Instance.new("Tool")
local Handle = Instance.new("Part")

Tool.Name = "Telekinesis"
Tool.Parent = LocalPlayer.Backpack
Tool.Grip = CFrame.new(0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0)
Tool.GripForward = Vector3.new(0, -1, 0)
Tool.GripRight = Vector3.new(0, 0, 1)
Tool.GripUp = Vector3.new(1, 0, 0)

Handle.Name = "Handle"
Handle.Parent = Tool
Handle.Color = Color3.new(0.5,0.5,0.5)
Handle.Transparency = 1
Handle.Size = Vector3.new(1, 1, 1)

local SelectedObject = nil
local IsMouseDown = false
local GrabDistance = nil
local IsScriptActive = true

local Connections = {
	InputBegan = nil,
	InputEnded = nil,
	HumanoidChanged = nil,
	ToolAncestryChanged = nil,
	HandleAncestryChanged = nil
}

local SelectionBox = Instance.new("SelectionBox")
SelectionBox.Color3 = SelectionColor
SelectionBox.LineThickness = 0.05
SelectionBox.SurfaceTransparency = 0.7
SelectionBox.SurfaceColor3 = SelectionColor

local RaycastParams = RaycastParams.new()
RaycastParams.FilterType = Enum.RaycastFilterType.Exclude
RaycastParams.IgnoreWater = true
RaycastParams.RespectCanCollide = false
RaycastParams.FilterDescendantsInstances = {Tool, LocalPlayer.Character}

local function PerformRaycast()
	if LocalPlayer.Character then
		RaycastParams.FilterDescendantsInstances = {Tool, LocalPlayer.Character}
	else
		RaycastParams.FilterDescendantsInstances = {Tool}
	end
	
	local mouseLocation = UserInputService:GetMouseLocation()
	local ray = Camera:ViewportPointToRay(mouseLocation.X, mouseLocation.Y)

	local raycastResult = workspace:Raycast(ray.Origin, ray.Direction * 1000, RaycastParams)
	return raycastResult
end

local function GetMouseHitPosition()
	local raycastResult = PerformRaycast()
	return raycastResult and raycastResult.Position or Camera.CFrame.Position + Camera.CFrame.LookVector * 1000
end

local function GetMouseTarget()
	local raycastResult = PerformRaycast()
	return raycastResult and raycastResult.Instance or nil
end

local function CleanupConnections()
	for _, connection in pairs(Connections) do
		if connection then
			connection:Disconnect()
			connection = nil
		end
	end
end

local function UpdateSelectionHighlight(Object)
	if Object then
		SelectionBox.Adornee = Object
		SelectionBox.Parent = Object
	else
		SelectionBox.Adornee = nil
		SelectionBox.Parent = nil
	end
end

local BodyPosition = Instance.new("BodyPosition")
BodyPosition.maxForce = MaxForce
BodyPosition.P = BodyPosition.P * 1.1

local MovementForce = BodyPosition:Clone()
MovementForce.maxForce = NormalForce

local function RemoveBodyGyro(object)
	if object then
		for i, Child in pairs(object:GetChildren()) do
			if Child:IsA("BodyGyro") then
				Child:Destroy()
			end
			if i % 200 == 0 then
				task.wait()
			end
		end
	end
end

local function CleanupScript()
	IsScriptActive = false
	IsMouseDown = false
	BodyPosition:Destroy()
	if SelectedObject then
		RemoveBodyGyro(SelectedObject)
	end
	UpdateSelectionHighlight(nil)
	CleanupConnections()
	if SelectionBox then
		SelectionBox:Destroy()
	end

	if script and typeof(script) == "Instance" then
		script:Destroy()
	end
end

local function HandleMouseDown()
	if IsMouseDown or not IsScriptActive then return end
	IsMouseDown = true

	while IsMouseDown and IsScriptActive do
		local hitObject = GetMouseTarget()
		if hitObject and not hitObject.Anchored then
			SelectedObject = hitObject
			GrabDistance = (SelectedObject.Position - Handle.Position).magnitude
			UpdateSelectionHighlight(SelectedObject)
			break
		end
		task.wait()
	end

	while IsMouseDown and IsScriptActive do
		if SelectedObject and SelectedObject.Parent then
			local mouseHitPos = GetMouseHitPosition()
			local AimCFrame = CFrame.new(Handle.Position, mouseHitPos)
			BodyPosition.Parent = SelectedObject
			BodyPosition.position = Handle.Position + AimCFrame.lookVector * GrabDistance
		else
			break
		end
		task.wait()
	end

	BodyPosition:remove()
	if SelectedObject then
		RemoveBodyGyro(SelectedObject)
	end
	UpdateSelectionHighlight(nil)
	SelectedObject = nil
end

local function HandleMouseUp()
	IsMouseDown = false
	if SelectedObject then
		RemoveBodyGyro(SelectedObject)
	end
	UpdateSelectionHighlight(nil)
end

local function HandleKeyPress(input)
	if not SelectedObject or not IsScriptActive then return end

	if input.KeyCode == Enum.KeyCode.Q and GrabDistance >= MinDistance then
		GrabDistance = GrabDistance - 10
	elseif input.KeyCode == Enum.KeyCode.E then
		GrabDistance = GrabDistance + 10
	end

	if input.KeyCode == Enum.KeyCode.T then
		GrabDistance = 10
	elseif input.KeyCode == Enum.KeyCode.Y then
		GrabDistance = 200
	end

	if input.KeyCode == Enum.KeyCode.R then
		RemoveBodyGyro(SelectedObject)
		if SelectedObject then
			local BodyGyro = Instance.new("BodyGyro")
			BodyGyro.maxTorque = Vector3.new(math.huge, math.huge, math.huge)
			BodyGyro.cframe = CFrame.new(SelectedObject.CFrame.p)
			BodyGyro.Parent = SelectedObject

			SelectedObject.Velocity = Vector3.new(0, 0, 0)
			SelectedObject.RotVelocity = Vector3.new(0, 0, 0)
		end
	end

	if input.KeyCode == Enum.KeyCode.Equals then
		BodyPosition.P = BodyPosition.P * 1.5
	elseif input.KeyCode == Enum.KeyCode.Minus then
		BodyPosition.P = BodyPosition.P * 0.5
	end
end

local function OnEquipped()

	Connections.InputBegan = UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed then return end

		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			HandleMouseDown()
		elseif input.UserInputType == Enum.UserInputType.Keyboard then
			HandleKeyPress(input)
		end
	end)

	Connections.InputEnded = UserInputService.InputEnded:Connect(function(input, gameProcessed)
		if gameProcessed then return end

		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			HandleMouseUp()
		end
	end)

	local Character = LocalPlayer.Character
	local Humanoid = Character:FindFirstChildWhichIsA("Humanoid")
	
	Connections.HumanoidChanged = Humanoid.Changed:Connect(function()
		if Humanoid.Health == 0 then
			CleanupScript()
		end
	end)
end

local function OnUnequipped()
	CleanupConnections()
	if SelectedObject then
		RemoveBodyGyro(SelectedObject)
	end
	UpdateSelectionHighlight(nil)
	IsMouseDown = false
end

Tool.Equipped:Connect(OnEquipped)
Tool.Unequipped:Connect(OnUnequipped)

Connections.ToolAncestryChanged = Tool.AncestryChanged:Connect(function(_, parent)
	if not parent then
		CleanupScript()
	end
end)

Connections.HandleAncestryChanged = Handle.AncestryChanged:Connect(function(_, parent)
	if not parent then
		CleanupScript()
	end
end)

Tool.Destroying:Connect(CleanupScript)
Handle.Destroying:Connect(CleanupScript)
